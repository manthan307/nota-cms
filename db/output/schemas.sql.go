// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: schemas.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createSchema = `-- name: CreateSchema :one
INSERT INTO schemas (name, definition, created_by)
VALUES ($1, $2, $3)
RETURNING id, name, definition, created_by, created_at, deleted_at
`

type CreateSchemaParams struct {
	Name       string
	Definition json.RawMessage
	CreatedBy  sql.NullInt32
}

func (q *Queries) CreateSchema(ctx context.Context, arg CreateSchemaParams) (Schema, error) {
	row := q.db.QueryRowContext(ctx, createSchema, arg.Name, arg.Definition, arg.CreatedBy)
	var i Schema
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Definition,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteSchema = `-- name: DeleteSchema :exec
UPDATE schemas
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteSchema(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSchema, id)
	return err
}

const getSchemaByID = `-- name: GetSchemaByID :one
SELECT id, name, definition, created_by, created_at, deleted_at FROM schemas
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetSchemaByID(ctx context.Context, id int32) (Schema, error) {
	row := q.db.QueryRowContext(ctx, getSchemaByID, id)
	var i Schema
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Definition,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getSchemaByName = `-- name: GetSchemaByName :one
SELECT id, name, definition, created_by, created_at, deleted_at FROM schemas
WHERE name = $1 AND deleted_at IS NULL
`

func (q *Queries) GetSchemaByName(ctx context.Context, name string) (Schema, error) {
	row := q.db.QueryRowContext(ctx, getSchemaByName, name)
	var i Schema
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Definition,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listSchemas = `-- name: ListSchemas :many
SELECT id, name, definition, created_by, created_at, deleted_at FROM schemas
WHERE deleted_at IS NULL
ORDER BY id
`

func (q *Queries) ListSchemas(ctx context.Context) ([]Schema, error) {
	rows, err := q.db.QueryContext(ctx, listSchemas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schema
	for rows.Next() {
		var i Schema
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Definition,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
