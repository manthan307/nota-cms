// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: media.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMedia = `-- name: CreateMedia :one
INSERT INTO media (key, url, bucket, type, uploaded_by)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, key, url, bucket, type, uploaded_by, created_at, updated_at, deleted_at
`

type CreateMediaParams struct {
	Key        string
	Url        string
	Bucket     string
	Type       string
	UploadedBy pgtype.UUID
}

func (q *Queries) CreateMedia(ctx context.Context, arg CreateMediaParams) (Medium, error) {
	row := q.db.QueryRow(ctx, createMedia,
		arg.Key,
		arg.Url,
		arg.Bucket,
		arg.Type,
		arg.UploadedBy,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Url,
		&i.Bucket,
		&i.Type,
		&i.UploadedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteMedia = `-- name: DeleteMedia :exec
UPDATE media
SET deleted_at = now()
WHERE id = $1
`

func (q *Queries) DeleteMedia(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMedia, id)
	return err
}

const getMediaByID = `-- name: GetMediaByID :one
SELECT id, key, url, bucket, type, uploaded_by, created_at, updated_at, deleted_at FROM media
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetMediaByID(ctx context.Context, id uuid.UUID) (Medium, error) {
	row := q.db.QueryRow(ctx, getMediaByID, id)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Url,
		&i.Bucket,
		&i.Type,
		&i.UploadedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listMedia = `-- name: ListMedia :many
SELECT id, key, url, bucket, type, uploaded_by, created_at, updated_at, deleted_at FROM media
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) ListMedia(ctx context.Context) ([]Medium, error) {
	rows, err := q.db.Query(ctx, listMedia)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Medium
	for rows.Next() {
		var i Medium
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Url,
			&i.Bucket,
			&i.Type,
			&i.UploadedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMedia = `-- name: UpdateMedia :one
UPDATE media
SET key = $2, url = $3, bucket = $4, type = $5, updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, key, url, bucket, type, uploaded_by, created_at, updated_at, deleted_at
`

type UpdateMediaParams struct {
	ID     uuid.UUID
	Key    string
	Url    string
	Bucket string
	Type   string
}

func (q *Queries) UpdateMedia(ctx context.Context, arg UpdateMediaParams) (Medium, error) {
	row := q.db.QueryRow(ctx, updateMedia,
		arg.ID,
		arg.Key,
		arg.Url,
		arg.Bucket,
		arg.Type,
	)
	var i Medium
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Url,
		&i.Bucket,
		&i.Type,
		&i.UploadedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
